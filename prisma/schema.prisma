// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  userQuiz      UserQuiz[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// QUIZ MODELS ------------------------------------------------------------------------------------------------------------------------------------------------

model Domain {
  id        String      @id @default(cuid())
  name      String
  Subdomain Subdomain[]
}

model Subdomain {
  id        String    @id @default(cuid())
  name      String
  domain_id String
  quizsets  Quizset[]

  domain Domain @relation(fields: [domain_id], references: [id])
}

model Quizset {
  id           String     @id @default(cuid())
  name         String
  subdomain_id String
  subdomain    Subdomain  @relation(fields: [subdomain_id], references: [id])
  questions    Question[]
  userquiz     UserQuiz[]
}

model Question {
  id         String       @id @default(cuid())
  text       String
  quizset_id String
  quizset    Quizset      @relation(fields: [quizset_id], references: [id])
  answers    Answer[]
  userAnswer UserAnswer[]
}

model Answer {
  id          String       @id @default(cuid())
  text        String
  question_id String
  is_correct  Boolean
  question    Question     @relation(fields: [question_id], references: [id])
  userAnswer  UserAnswer[]
}

model UserQuiz {
  id            String       @id @default(cuid())
  user_id       String
  quizset_id    String
  quiz_duration String
  score         Int
  user          User         @relation(fields: [user_id], references: [id])
  quizset       Quizset      @relation(fields: [quizset_id], references: [id])
  userAnswer    UserAnswer[]
}

model UserAnswer {
  id          String   @id @default(cuid())
  userquiz_id String
  question_id String
  answer_id   String
  userquiz    UserQuiz @relation(fields: [userquiz_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])
  answer      Answer   @relation(fields: [answer_id], references: [id])
}
